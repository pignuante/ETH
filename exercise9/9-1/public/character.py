#!/usr/bin/env python3

# This is the class that you have found online. Do not edit this file
# and implement your extension through inheritance only. Any change
# in this file will be reset for the grading!

"""
The `Character` class provides several convenient functions,
for example, getters for `_name`, `_lvl`, and the health related fields,
 but also the interface that can be used for battles (i.e., `attack` and `is_alive`).
 In the current form, characters always deal physical damage (internally, `attack` calls `_take_physical_damage`),
 but the class already defines an extension point for magical damage (i.e., `_take_magical_damage`) that is not used so far.
 Please make yourself familiar with the current implementation of `Character` to understand the inner workings,
 the extensive test suite in `test_character.py` will serve you as documentation of the mechanics
"""
"""
More specifically,
the maximum health depends on the level: 
    characters start with 50 health on level 1 and gain 50 max health for every further level 
        (e.g., a lvl 7 character has 350 life). 
Attacks deal 10 dmg per level of the attacker plus the level difference. 
    For example, a lvl 6 char that attacks a lvl 4 char would deal 6*10+2 damage. 
    A counter attack would deal 4*10-2 damage.
"""
"""
Fights between Characters are round based, so the characters attack one after the other
"""


class Character:
    def __init__(self, name, lvl):
        ###################
        ### type check  ###
        ###################
        assert isinstance(name, str)
        assert isinstance(lvl, int)
        assert lvl > 0
        assert name
        ##################
        ### 맴버 변수화 ###
        #################
        self._name = name
        self._lvl = lvl
        self._health_max = lvl * 50
        self._health_cur = self._health_max

    def get_name(self):
        return self._name

    def get_lvl(self):
        return self._lvl

    def get_health(self):
        return (self._health_cur, self._health_max)

    def attack(self, other):
        assert isinstance(other, Character)
        #####################################
        ### 자해 방지 ㅋ ######################
        #####################################
        assert self is not other

        if not self.is_alive():
            raise Warning("Character is dead!")

        other._take_physical_damage(self._get_caused_dmg(other))

    def _get_caused_dmg(self, other):
        assert isinstance(other, Character)
        assert self is not other
        #####################################################################
        ### 내가 상대한테 주는 데미지                                         ###
        ### 최소 데미지는 1                                                 ###
        ### 공격력은 LEVEL * 11 - (상대방 레벨)                              ###
        ### Knight : 20% 감소된 데미지를 가짐 -> 상속으로 knight 에서 바꿔줘야함 ###
        ### Mage : 마법 데미지니 여기 말고..                                  ###
        ###  Attacks deal 10 dmg per level of the attacker plus            ###
        ### 10 * level + (공격자 level - 방어자 level)                       ###
        ######################################################################
        return max(1, (self._lvl * 10) + (self._lvl - other._lvl))  # self._lvl * 11로 되어있는데 설명에는 10이라서 내가 고침

    def _take_physical_damage(self, amount):
        ################################
        ### 내가 상대로 부터 받은 데미지 ###
        ################################
        assert isinstance(amount, int)
        assert amount >= 0
        self._health_cur = max(0, self._health_cur - amount)

    def _take_magical_damage(self, amount):
        #####################################
        ### 상대로부터 받은 ***마법*** 데미지 ###
        #####################################
        assert isinstance(amount, int)
        assert amount >= 0
        self._health_cur = max(0, self._health_cur - amount)

    def is_alive(self):
        return self._health_cur > 0

    def __repr__(self):
        s = "{} ({}, {}, {}/{})"
        return s.format(self._name, type(self).__name__, self._lvl, self._health_cur, self._health_max)
